// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskProjectManagement.Persistence.ProjectDbContext;

#nullable disable

namespace TaskProjectManagement.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712123359_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemandTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.Property<int>("teamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("DemandId");

                    b.HasIndex("TeamId");

                    b.HasIndex("WorkerId");

                    b.HasIndex("teamLeaderId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionId"));

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("MissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("MissionId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Notifications", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.SubTask", b =>
                {
                    b.Property<int>("SubTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTaskId"));

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("SubTaskId");

                    b.HasIndex("WorkerId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<int>("MissionId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("teamLeaderId")
                        .HasColumnType("int");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamLeader");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Worker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("TeamId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.WorkerNotification", b =>
                {
                    b.Property<int>("WorkerNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorkerNotificationId"));

                    b.Property<int>("NotificationsId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkerId")
                        .HasColumnType("int");

                    b.HasKey("WorkerNotificationId");

                    b.HasIndex("NotificationsId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkerId");

                    b.ToTable("WorkersNotification");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Demand", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany("Demands")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Worker", "Worker")
                        .WithMany("Demands")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.TeamLeader", "teamLeader")
                        .WithMany()
                        .HasForeignKey("teamLeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("Worker");

                    b.Navigation("teamLeader");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Mission", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithOne("Mission")
                        .HasForeignKey("TaskProjectManagement.Domain.Entities.Mission", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Notifications", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.TeamLeader", "Sender")
                        .WithMany("Notifications")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.SubTask", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Worker", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamLeader", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithOne("teamLeader")
                        .HasForeignKey("TaskProjectManagement.Domain.Entities.TeamLeader", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Worker", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "CreatedBy")
                        .WithMany("CreatedWorkers")
                        .HasForeignKey("CreatedById");

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany("Worker")
                        .HasForeignKey("TeamId");

                    b.Navigation("CreatedBy");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.WorkerNotification", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Notifications", "Notifications")
                        .WithMany("WorkerNotifications")
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Worker", null)
                        .WithMany("Notifications")
                        .HasForeignKey("WorkerId");

                    b.Navigation("Notifications");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Notifications", b =>
                {
                    b.Navigation("WorkerNotifications");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Team", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Mission")
                        .IsRequired();

                    b.Navigation("Worker");

                    b.Navigation("teamLeader")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamLeader", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedWorkers");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Worker", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
