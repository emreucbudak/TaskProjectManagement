// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskProjectManagement.Persistence.ProjectDbContext;

#nullable disable

namespace TaskProjectManagement.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250711092803_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemandDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DemandTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("DemandId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.DemandStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("DemandStatus");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Mission", b =>
                {
                    b.Property<int>("MissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionId"));

                    b.Property<string>("MissionDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MissionStatusId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("MissionId");

                    b.HasIndex("MissionStatusId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.MissionStatus", b =>
                {
                    b.Property<int>("MissionStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MissionStatusId"));

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MissionStatusId");

                    b.ToTable("MissionStatus");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Notifications", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("NotificationText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Roles", b =>
                {
                    b.Property<int>("AuthorizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorizationId"));

                    b.Property<string>("AuthorizationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorizationId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.SubTask", b =>
                {
                    b.Property<int>("SubTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubTaskId"));

                    b.Property<int>("SubStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SubTaskId");

                    b.HasIndex("SubStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.SubTaskStatus", b =>
                {
                    b.Property<int>("SubStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubStatusId"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubStatusId");

                    b.ToTable("SubTasksStatus");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<int>("MemberCount")
                        .HasColumnType("int");

                    b.Property<int>("MissionId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamId1");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMember");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStatus");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("AuthorizationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedTeamId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedTeamTeamId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RolesAuthorizationId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatedTeamId");

                    b.HasIndex("CreatedTeamTeamId");

                    b.HasIndex("RolesAuthorizationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.UserNotification", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId1");

                    b.ToTable("UsersNotification");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Demand", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.DemandStatus", "Status")
                        .WithMany("Demands")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany("Demands")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", null)
                        .WithMany("Demands")
                        .HasForeignKey("UserId1");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Mission", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.MissionStatus", "MissionStatus")
                        .WithMany("Missions")
                        .HasForeignKey("MissionStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithOne("Mission")
                        .HasForeignKey("TaskProjectManagement.Domain.Entities.Mission", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MissionStatus");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.SubTask", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.SubTaskStatus", "SubStatus")
                        .WithMany()
                        .HasForeignKey("SubStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Team", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamMember", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", null)
                        .WithMany("Member")
                        .HasForeignKey("TeamId1");

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.TeamStatus", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.User", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Roles", "Authorization")
                        .WithMany()
                        .HasForeignKey("AuthorizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("CreatedTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "CreatedTeam")
                        .WithMany()
                        .HasForeignKey("CreatedTeamTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.Roles", null)
                        .WithMany("Users")
                        .HasForeignKey("RolesAuthorizationId");

                    b.HasOne("TaskProjectManagement.Domain.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", null)
                        .WithMany("CreatedUsers")
                        .HasForeignKey("UserId1");

                    b.Navigation("Authorization");

                    b.Navigation("CreatedBy");

                    b.Navigation("CreatedTeam");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.UserNotification", b =>
                {
                    b.HasOne("TaskProjectManagement.Domain.Entities.Notifications", "Notification")
                        .WithMany("UserNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskProjectManagement.Domain.Entities.User", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.DemandStatus", b =>
                {
                    b.Navigation("Demands");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.MissionStatus", b =>
                {
                    b.Navigation("Missions");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Notifications", b =>
                {
                    b.Navigation("UserNotifications");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Roles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.Team", b =>
                {
                    b.Navigation("Demands");

                    b.Navigation("Member");

                    b.Navigation("Mission")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskProjectManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedUsers");

                    b.Navigation("Demands");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
